shiny::runApp('Linear_test')
df <- read.csv("~/Dropbox/Resazurin/Pipeline_MIC_6h_github/output/tables/alldata.csv", stringsAsFactors = F)
reference <- readRDS("~/Dropbox/Resazurin/Pipeline_MIC_6h_github/output/tables/reference_data_normalized_model_list.rds")
View(df)
names(df)
df1 <- df[c("ID", "strain", "antibiotic", "quality", "run")]
View(df1)
data <- referece[[1]]
data <- reference[[1]]
names(data())
names(data)
data$data
plot(data$data$`log(newdf$concentration)`, data$data$`log(newdf$concentration)` )
plot(data$data$`log(newdf$concentration)`, data$data$`log(newdf$concentration)` )
plot(data$data$`log(newdf$concentration)`, data$data$normalized_points )
plot(data)
plot(data$data$`log(newdf$concentration)`, data$data$normalized_points )
library(drc)
model<-drm(data$data$`log(newdf$concentration)`, data$data$normalized_points,fct=LL.4())
model<-drm(data$data$`log(newdf$concentration)`~data$data$normalized_points,fct=LL.4())
plot(model)
model<-drm(data$data$normalized_points~data$data$`log(newdf$concentration)`,fct=LL.4())
plot(model)
model
plot(model)
model <- drm(data$data$normalized_points ~ data$data$`log(newdf$concentration)`,fct=LL.4())
model <- drm(data$data$normalized_points ~ data$data$`log(newdf$concentration)`,fct=L.4())
model <- drm(data$data$normalized_points ~ data$data$`log(newdf$concentration)`,fct=L.4())
plot(model)
model <- drm(data$data$normalized_points ~ data$data$`log(newdf$concentration)`,fct=L.4())
plot(model,log="x")
plot(model,log="xy")
plot(data$data$`log(newdf$concentration)`, data$data$normalized_points )
data$dataList$dose
data$dataList$resp
data$dataList$resp
data$dataList$origResp
conc <- data$dataList$dose
response <- data$dataList$resp
model <- drm(response ~ conc, fct = L.4())
plot(model)
model <- drm(response ~ conc, fct = LL.4())
plot(model)
plot(conc, response)
plot(data)
data <- reference[[1]]
plot(data)
data <- reference[1]
plot(data)
data <- reference[[1]]
plot(data)
model <- drm(response ~ conc, fct = L.4())
plot(data)
model <- drm(response ~ conc, fct = L.4())
model
data$varParm
data$fit$par
plot(data, log = "x")
plot(data, log = "x")
plot(data, log = "xy")
plot(data, log = "y")
knitr::opts_chunk$set(echo = TRUE)
options(width = 600)
# Load dependencies
## ----------------------------------------------------------------------------------------------------------------------------
packages <- c("pander", "plyr", "gmodels", "knitr")
to.install <- setdiff(packages, rownames(installed.packages()))
if (length(to.install) > 0) {
install.packages(to.install)
}
lapply(packages, library, character.only = TRUE)
# pandoc settings
set.alignment(row.names = 'left', permanent = T)
# wd, clear space
## ----------------------------------------------------------------------------------------------------------------------------
rm(list = ls())
try(setwd('C:/Users/sunny/Dropbox/Resazurin/Pipeline_MIC_6h_github'), silent=T)
try(setwd("C:/Users/valdes/Dropbox/Resazurin/Pipeline_MIC_6h_github"), silent=T)
try(setwd("~/Dropbox/Resazurin/Pipeline_MIC_6h_github") , silent = T)
# paths for figures to be loaded in png or pdf
wd <- getwd()
path_fig1 <- paste0(wd, "/output/figures/Figure1.png" )
path_fig2 <- paste0(wd, "/output/figures/Figure2.png" )
path_fig3 <- paste0(wd, "/output/figures/Figure3.png" )
path_figS1 <- paste0(wd, "/output/figures/FigureS1.png" )
path_figS2 <- paste0(wd, "/output/figures/FigureS2.png" )
path_figS3AB <- paste0(wd, "/output/figures/FigureS3AB.png" )
path_figS4AB <- paste0(wd, "/output/figures/FigureS4AB.png" )
# Load data
## ----------------------------------------------------------------------------------------------------------------------------
session <- readRDS("output/tables/sessioninfo.rds")
df <- read.csv("output/tables/training+validationdata.csv", stringsAsFactors = F)
lm <- readRDS("output/tables/lm_parameters_variance_covariance_matrix_list.rds")
pr <- read.csv("output/tables/categories_predicted.csv", stringsAsFactors = F)
dev <- read.csv("output/tables/deviations.csv", stringsAsFactors = F)
pearson <- readRDS("output/tables/pearson.rds")
cv <- read.table("output/figures/coefficient_variation.txt")
outlier <- read.csv("output/tables/outlier.csv")
spanning_CI <- read.csv("output/tables/spanning_CI.csv", stringsAsFactors = F)
#pr.f <- ddply(pr.f, ~ ID, summarize, freq = sum )
knitr::opts_chunk$set(echo = TRUE)
options(width = 600)
# Load dependencies
## ----------------------------------------------------------------------------------------------------------------------------
packages <- c("pander", "plyr", "gmodels", "knitr")
to.install <- setdiff(packages, rownames(installed.packages()))
if (length(to.install) > 0) {
install.packages(to.install)
}
lapply(packages, library, character.only = TRUE)
# pandoc settings
set.alignment(row.names = 'left', permanent = T)
# wd, clear space
## ----------------------------------------------------------------------------------------------------------------------------
rm(list = ls())
try(setwd('C:/Users/sunny/Dropbox/Resazurin/Pipeline_MIC_6h_github'), silent=T)
try(setwd("C:/Users/valdes/Dropbox/Resazurin/Pipeline_MIC_6h_github"), silent=T)
try(setwd("~/Dropbox/Resazurin/Pipeline_MIC_6h_github") , silent = T)
# paths for figures to be loaded in png or pdf
wd <- getwd()
path_fig1 <- paste0(wd, "/output/figures/Figure1.png" )
path_fig2 <- paste0(wd, "/output/figures/Figure2.png" )
path_fig3 <- paste0(wd, "/output/figures/Figure3.png" )
path_figS1 <- paste0(wd, "/output/figures/FigureS1.png" )
path_figS2 <- paste0(wd, "/output/figures/FigureS2.png" )
path_figS3AB <- paste0(wd, "/output/figures/FigureS3AB.png" )
path_figS4AB <- paste0(wd, "/output/figures/FigureS4AB.png" )
# Load data
## ----------------------------------------------------------------------------------------------------------------------------
session <- readRDS("output/tables/sessioninfo.rds")
df <- read.csv("output/tables/training+validationdata.csv", stringsAsFactors = F)
lm <- readRDS("output/tables/lm_parameters_variance_covariance_matrix_list.rds")
pr <- read.csv("output/tables/categories_predicted.csv", stringsAsFactors = F)
dev <- read.csv("output/tables/deviations.csv", stringsAsFactors = F)
pearson <- readRDS("output/tables/pearson.rds")
cv <- read.table("output/figures/coefficient_variation.txt")
outlier <- read.csv("output/tables/outlier.csv")
spanning_CI <- read.csv("output/tables/spanning_CI.csv", stringsAsFactors = F)
#pr.f <- ddply(pr.f, ~ ID, summarize, freq = sum )
session$R.version
session$running
session$loadedOnly
View(df)
View(df)
unique(df$quality)
try(setwd('C:/Users/sunny/Dropbox/Resazurin/Pipeline_MIC_6h_github'), silent=T)
try(setwd("C:/Users/valdes/Dropbox/Resazurin/Pipeline_MIC_6h_github"), silent=T)
try(setwd("C:/Users/sunny/Dropbox/Resazurin/Pipeline_MIC_6h_github") , silent = T)
try(setwd("C:/Users/guest/Dropbox/Resazurin/Pipeline_MIC_6h_github") , silent = T)
source('scripts/01_fit_dose-response_model.R')
getwd()
try(setwd('C:/Users/sunny/Dropbox/Resazurin/Pipeline_MIC_6h_github'), silent=T)
try(setwd("C:/Users/valdes/Dropbox/Resazurin/Pipeline_MIC_6h_github"), silent=T)
try(setwd("C:/Users/sunny/Dropbox/Resazurin/Pipeline_MIC_6h_github") , silent = T)
try(setwd("C:/Users/guest/Dropbox/Resazurin/Pipeline_MIC_6h_github") , silent = T)
getwd()
